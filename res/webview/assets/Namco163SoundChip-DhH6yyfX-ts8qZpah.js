class n{registers=new Uint8Array(128);out=new Int32Array(8);numch=1;cycpos=0;curch=0;lpaccum=0;clock(t){this.numch=1+(this.registers[127]>>4&7);for(let s=0;s<t;++s)this.cycpos=(this.cycpos+1)%15,this.cycpos===0&&(this.curch=(this.curch+1)%this.numch,this.clock_channel(this.curch))}clock_channel(t){const s=128-8*(t+1);let r=(this.registers[s+5]<<16)+(this.registers[s+3]<<8)+this.registers[s+1];const h=((3&this.registers[s+4])<<16)+(this.registers[s+2]<<8)+this.registers[s];let i=4*(64-(this.registers[s+4]>>2));if(i>32&&this.registers[s+4]!==0){for(let e=2;e<<2<i;++e)if(this.registers[e-2]===0&&this.registers[e-1]===0&&this.registers[e]===0){i=32-(28&this.registers[s+4]);break}}const c=this.registers[s+6];r=(r+h)%(i<<16);const g=15&this.registers[s+7],o=(this.getWavefromRAM((r>>16)+c&255)-8)*g;this.registers[s+5]=r>>16&255,this.registers[s+3]=r>>8&255,this.registers[s+1]=255&r,this.out[t]=16*o,this.output()}getWavefromRAM(t){const s=this.registers[t>>1];return 1&t?s>>4:15&s}write(t,s){this.registers[t]=255&s}read(t){return this.registers[t]}getval(){return this.lpaccum<<2}output(){let t=0;for(let s=0;s<this.numch;++s)t+=this.out[s];t+=this.lpaccum,this.lpaccum-=t*(1/16)}}export{n as s};
