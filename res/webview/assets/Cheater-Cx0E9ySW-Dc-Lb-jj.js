var u,p;(function(s){s[s.KEEP=0]="KEEP",s[s.ONCE=1]="ONCE",s[s.NOT_GREATER=2]="NOT_GREATER",s[s.NOT_LESS=3]="NOT_LESS"})(u||(u={})),(function(s){s[s.BYTE=1]="BYTE",s[s.WORD=2]="WORD",s[s.DWORD=4]="DWORD"})(p||(p={}));class g{cheats=new Map;nes;constructor(t){this.nes=t}addCheat(t){try{const e=this.parseCheatCode(t);this.cheats.set(t,e)}catch{throw new Error(`Invalid cheat code format: ${t}`)}}removeCheat(t){const e=this.cheats.get(t);e&&e.enabled&&e.originalValue!==void 0&&this.writeMemory(e.address,e.originalValue,e.length),this.cheats.delete(t)}setCheatEnabled(t,e){const a=this.cheats.get(t);a&&(a.enabled&&!e&&a.originalValue!==void 0&&(this.writeMemory(a.address,a.originalValue,a.length),a.originalValue=void 0),a.enabled=e,a.applied=!1)}isCheatEnabled(t){const e=this.getCheat(t);return!!e&&e.enabled}getCheat(t){return this.cheats.get(t)}getCheats(){return Array.from(this.cheats.values())}parseCheatCode(t){const e=t.trim().toUpperCase().split("-");if(e.length!==3)throw new Error("Invalid cheat code format. Expected: XXXX-YZ-VVVV");const a=e[0];if(!/^[\dA-F]{4}$/.test(a))throw new Error("Invalid address format. Expected 4 hex digits.");const o=Number.parseInt(a,16),r=e[1];if(!/^[0-3][1-4]$/.test(r))throw new Error("Invalid type/length format. Expected: XY where X=0-3, Y=1-4");const h=Number.parseInt(r[0],10),n=Number.parseInt(r[1],10);let i;switch(n){case 1:i=1;break;case 2:i=2;break;case 4:i=4;break;default:throw new Error("Invalid length. Supported: 1, 2, 4 bytes")}const l=e[2],d=2*n;if(l.length>d||!/^[\dA-F]+$/.test(l))throw new Error(`Invalid value format. Expected up to ${d} hex digits.`);const c=Number.parseInt(l,16);if(c>Math.pow(256,n)-1)throw new Error(`Value ${c} exceeds maximum for ${n} bytes`);return{code:t,address:o,length:i,type:h,value:c,enabled:!0}}applyCheats(){for(const t of this.cheats.values())t.enabled&&this.applyCheat(t)}applyCheat(t){const e=this.readMemory(t.address,t.length);t.originalValue===void 0&&(t.originalValue=e);let a=!1;const o=t.value;switch(t.type){case 0:a=!0;break;case 1:t.applied||(a=!0,t.applied=!0);break;case 2:e>t.value&&(a=!0);break;case 3:e<t.value&&(a=!0)}a&&this.writeMemory(t.address,o,t.length)}readMemory(t,e){const a=this.nes.getCPURAM();if(!a)return 0;let o=0;for(let r=0;r<e;r++)o|=a.read(t+r)<<8*r;return o}writeMemory(t,e,a){const o=this.nes.getCPURAM();if(o)for(let r=0;r<a;r++){const h=e>>8*r&255;o.write(t+r,h)}}clearCheats(){for(const t of this.cheats.values())t.enabled&&t.originalValue!==void 0&&this.writeMemory(t.address,t.originalValue,t.length);this.cheats.clear()}loadCheatsFromString(t){const e=t.split(`
`);for(const a of e){const o=a.trim();if(o&&!o.startsWith("#"))try{const r=o.split(/\s+/)[0];this.addCheat(r)}catch(r){console.warn(`Failed to parse cheat line: "${o}"`,r)}}}exportCheatsToString(){const t=[];for(const e of this.cheats.values()){const a=e.enabled?"":"# DISABLED: ";t.push(`${a}${e.code}`)}return t.join(`
`)}static createCheatCode(t,e,a,o){return`${t.toString(16).toUpperCase().padStart(4,"0")}-${`${e}${a}`}-${o.toString(16).toUpperCase().padStart(2*a,"0")}`}getStats(){let t=0,e=0;for(const a of this.cheats.values())a.enabled?t++:e++;return{total:this.cheats.size,enabled:t,disabled:e}}}export{p as CheatLength,u as CheatType,g as Cheater};
